{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Desktop\\\\deadline\\\\coming\\\\common\\\\LanguageSwitcher\\\\context\\\\language.provider.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport LanguageContext from './language.context';\nimport languageReducer, { initialState } from './language.reducer';\nimport { IntlProvider } from 'react-intl';\nimport { InjectRTL } from '../rtl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('@formatjs/intl-pluralrules/polyfill');\n\nrequire('@formatjs/intl-pluralrules/locale-data/ar');\n\nrequire('@formatjs/intl-pluralrules/locale-data/en');\n\nrequire('@formatjs/intl-pluralrules/locale-data/de');\n\nrequire('@formatjs/intl-pluralrules/locale-data/es');\n\nrequire('@formatjs/intl-pluralrules/locale-data/zh');\n\nrequire('@formatjs/intl-pluralrules/locale-data/he');\n\nconst LanguageProvider = ({\n  children,\n  messages\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(languageReducer, initialState);\n\n  const toggleLanguage = lang => {\n    dispatch({\n      type: 'CURRENT_LANGUAGE',\n      payload: lang\n    });\n    localStorage.setItem('lang', lang);\n  };\n\n  useEffect(() => {\n    const localLang = localStorage.getItem('lang');\n\n    if (localLang) {\n      toggleLanguage(localLang);\n    } else {\n      toggleLanguage(navigator.language.split('-')[0]);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      state,\n      toggleLanguage,\n      dispatch\n    },\n    children: /*#__PURE__*/_jsxDEV(IntlProvider, {\n      locale: state.lang,\n      messages: messages[state.lang],\n      children: /*#__PURE__*/_jsxDEV(InjectRTL, {\n        lang: state.lang,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\nexport default LanguageProvider;","map":{"version":3,"sources":["C:/Users/Owner/Desktop/deadline/coming/common/LanguageSwitcher/context/language.provider.js"],"names":["React","useReducer","useEffect","LanguageContext","languageReducer","initialState","IntlProvider","InjectRTL","require","LanguageProvider","children","messages","state","dispatch","toggleLanguage","lang","type","payload","localStorage","setItem","localLang","getItem","navigator","language","split"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,eAAP,IAA0BC,YAA1B,QAA8C,oBAA9C;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,SAAT,QAA0B,QAA1B;;;AAEAC,OAAO,CAAC,qCAAD,CAAP;;AACAA,OAAO,CAAC,2CAAD,CAAP;;AACAA,OAAO,CAAC,2CAAD,CAAP;;AACAA,OAAO,CAAC,2CAAD,CAAP;;AACAA,OAAO,CAAC,2CAAD,CAAP;;AACAA,OAAO,CAAC,2CAAD,CAAP;;AACAA,OAAO,CAAC,2CAAD,CAAP;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA4B;AACnD,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBZ,UAAU,CAACG,eAAD,EAAkBC,YAAlB,CAApC;;AACA,QAAMS,cAAc,GAAIC,IAAD,IAAU;AAC/BF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,kBAAR;AAA4BC,MAAAA,OAAO,EAAEF;AAArC,KAAD,CAAR;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BJ,IAA7B;AACD,GAHD;;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,SAAS,GAAGF,YAAY,CAACG,OAAb,CAAqB,MAArB,CAAlB;;AACA,QAAID,SAAJ,EAAe;AACbN,MAAAA,cAAc,CAACM,SAAD,CAAd;AACD,KAFD,MAEO;AACLN,MAAAA,cAAc,CAACQ,SAAS,CAACC,QAAV,CAAmBC,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,CAAD,CAAd;AACD;AACF,GAPQ,EAON,EAPM,CAAT;AASA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEZ,MAAAA,KAAF;AAASE,MAAAA,cAAT;AAAyBD,MAAAA;AAAzB,KAAjC;AAAA,2BACE,QAAC,YAAD;AAAc,MAAA,MAAM,EAAED,KAAK,CAACG,IAA5B;AAAkC,MAAA,QAAQ,EAAEJ,QAAQ,CAACC,KAAK,CAACG,IAAP,CAApD;AAAA,6BACE,QAAC,SAAD;AAAW,QAAA,IAAI,EAAEH,KAAK,CAACG,IAAvB;AAAA,kBAA8BL;AAA9B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAtBD;;AAuBA,eAAeD,gBAAf","sourcesContent":["import React, { useReducer, useEffect } from 'react';\r\nimport LanguageContext from './language.context';\r\nimport languageReducer, { initialState } from './language.reducer';\r\nimport { IntlProvider } from 'react-intl';\r\nimport { InjectRTL } from '../rtl';\r\n\r\nrequire('@formatjs/intl-pluralrules/polyfill');\r\nrequire('@formatjs/intl-pluralrules/locale-data/ar');\r\nrequire('@formatjs/intl-pluralrules/locale-data/en');\r\nrequire('@formatjs/intl-pluralrules/locale-data/de');\r\nrequire('@formatjs/intl-pluralrules/locale-data/es');\r\nrequire('@formatjs/intl-pluralrules/locale-data/zh');\r\nrequire('@formatjs/intl-pluralrules/locale-data/he');\r\n\r\nconst LanguageProvider = ({ children, messages }) => {\r\n  const [state, dispatch] = useReducer(languageReducer, initialState);\r\n  const toggleLanguage = (lang) => {\r\n    dispatch({ type: 'CURRENT_LANGUAGE', payload: lang });\r\n    localStorage.setItem('lang', lang);\r\n  };\r\n  useEffect(() => {\r\n    const localLang = localStorage.getItem('lang');\r\n    if (localLang) {\r\n      toggleLanguage(localLang);\r\n    } else {\r\n      toggleLanguage(navigator.language.split('-')[0]);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <LanguageContext.Provider value={{ state, toggleLanguage, dispatch }}>\r\n      <IntlProvider locale={state.lang} messages={messages[state.lang]}>\r\n        <InjectRTL lang={state.lang}>{children}</InjectRTL>\r\n      </IntlProvider>\r\n    </LanguageContext.Provider>\r\n  );\r\n};\r\nexport default LanguageProvider;\r\n"]},"metadata":{},"sourceType":"module"}