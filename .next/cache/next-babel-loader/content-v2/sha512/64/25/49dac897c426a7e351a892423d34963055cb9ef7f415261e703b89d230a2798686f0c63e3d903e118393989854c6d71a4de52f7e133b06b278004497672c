{"ast":null,"code":"import _classCallCheck from \"C:/Users/Owner/Desktop/deadline/coming/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Owner/Desktop/deadline/coming/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/Owner/Desktop/deadline/coming/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:/Users/Owner/Desktop/deadline/coming/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:/Users/Owner/Desktop/deadline/coming/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Desktop\\\\deadline\\\\coming\\\\components\\\\NormalClock\\\\NormalClock.js\",\n    _this = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport './NormalClock.css';\nimport { FormattedMessage } from 'react-intl'; // function component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar StaticCard = function StaticCard(_ref) {\n  var position = _ref.position,\n      digit = _ref.digit;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: position,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: digit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, _this);\n}; // function component\n\n\n_c = StaticCard;\n\nvar NormalUnitContainer = function NormalUnitContainer(_ref2) {\n  var digit = _ref2.digit,\n      _ref2$unit = _ref2.unit,\n      unit = _ref2$unit === void 0 ? 'time' : _ref2$unit,\n      countdown = _ref2.countdown;\n  // assign digit values\n  var currentDigit = digit;\n  var previousDigit;\n\n  if (countdown) {\n    previousDigit = digit + 1; // to prevent a negative value\n\n    if (unit !== 'hours') {\n      previousDigit = previousDigit === 60 ? 59 : previousDigit;\n    } else {\n      previousDigit = previousDigit === 24 ? 23 : previousDigit;\n    }\n  } // add zero\n\n\n  if (currentDigit < 10) {\n    currentDigit = \"0\".concat(currentDigit);\n  }\n\n  if (previousDigit < 10) {\n    previousDigit = \"0\".concat(previousDigit);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'NormalUnitContainer',\n    children: [/*#__PURE__*/_jsxDEV(StaticCard, {\n      position: 'NormalupperCard',\n      digit: currentDigit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"digitLabel\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n          id: unit,\n          defaultValue: \"unit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, _this);\n};\n\n_c2 = NormalUnitContainer;\n\nfunction getTimeRemaining(endtime) {\n  var t = Date.parse(endtime) - Date.parse(new Date());\n  var days = Math.floor(t / (1000 * 60 * 60 * 24));\n  var hours = Math.floor(t / (1000 * 60 * 60) % 24);\n  var minutes = Math.floor(t / 1000 / 60 % 60);\n  var seconds = Math.floor(t / 1000 % 60);\n  return {\n    time: t,\n    days: days,\n    hours: hours,\n    minutes: minutes,\n    seconds: seconds\n  };\n} // class component\n\n\nvar NormalClock = /*#__PURE__*/function (_React$Component) {\n  _inherits(NormalClock, _React$Component);\n\n  var _super = _createSuper(NormalClock);\n\n  function NormalClock(props) {\n    var _this2;\n\n    _classCallCheck(this, NormalClock);\n\n    _this2 = _super.call(this, props);\n    _this2.state = {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    };\n    return _this2;\n  }\n\n  _createClass(NormalClock, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      this.timerID = setInterval(function () {\n        return _this3.updateTime();\n      }, 50);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n  }, {\n    key: \"updateTime\",\n    value: function updateTime() {\n      var _getTimeRemaining = getTimeRemaining(this.props.countdown),\n          days = _getTimeRemaining.days,\n          hours = _getTimeRemaining.hours,\n          minutes = _getTimeRemaining.minutes,\n          seconds = _getTimeRemaining.seconds;\n\n      if (days !== this.state.days) {\n        this.setState({\n          days: days\n        });\n      } // on hour change, update hours and shuffle state\n\n\n      if (hours !== this.state.hours) {\n        this.setState({\n          hours: hours\n        });\n      } // on minute change, update minutes and shuffle state\n\n\n      if (minutes !== this.state.minutes) {\n        this.setState({\n          minutes: minutes\n        });\n      } // on second change, update seconds and shuffle state\n\n\n      if (seconds !== this.state.seconds) {\n        this.setState({\n          seconds: seconds\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // state object destructuring\n      var _this$state = this.state,\n          days = _this$state.days,\n          hours = _this$state.hours,\n          minutes = _this$state.minutes,\n          seconds = _this$state.seconds;\n      var _this$props = this.props,\n          countdown = _this$props.countdown,\n          divider = _this$props.divider;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'NormalClock',\n        children: [/*#__PURE__*/_jsxDEV(NormalUnitContainer, {\n          countdown: countdown,\n          unit: 'days',\n          digit: days\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this), divider ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dividerColon\",\n          children: \":\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 20\n        }, this) : '', /*#__PURE__*/_jsxDEV(NormalUnitContainer, {\n          countdown: countdown,\n          unit: 'hours',\n          digit: hours\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }, this), divider ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dividerColon\",\n          children: \":\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 20\n        }, this) : '', /*#__PURE__*/_jsxDEV(NormalUnitContainer, {\n          countdown: countdown,\n          unit: 'minutes',\n          digit: minutes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this), divider ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dividerColon\",\n          children: \":\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 20\n        }, this) : '', /*#__PURE__*/_jsxDEV(NormalUnitContainer, {\n          countdown: countdown,\n          unit: 'seconds',\n          digit: seconds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return NormalClock;\n}(React.Component);\n\nexport default NormalClock;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StaticCard\");\n$RefreshReg$(_c2, \"NormalUnitContainer\");","map":{"version":3,"sources":["C:/Users/Owner/Desktop/deadline/coming/components/NormalClock/NormalClock.js"],"names":["React","FormattedMessage","StaticCard","position","digit","NormalUnitContainer","unit","countdown","currentDigit","previousDigit","getTimeRemaining","endtime","t","Date","parse","days","Math","floor","hours","minutes","seconds","time","NormalClock","props","state","timerID","setInterval","updateTime","clearInterval","setState","divider","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './NormalClock.css';\r\nimport { FormattedMessage } from 'react-intl';\r\n// function component\r\nconst StaticCard = ({ position, digit }) => {\r\n  return (\r\n    <div className={position}>\r\n      <span>{digit}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\n// function component\r\nconst NormalUnitContainer = ({ digit, unit = 'time', countdown }) => {\r\n  // assign digit values\r\n  let currentDigit = digit;\r\n  let previousDigit;\r\n  if (countdown) {\r\n    previousDigit = digit + 1;\r\n\r\n    // to prevent a negative value\r\n    if (unit !== 'hours') {\r\n      previousDigit = previousDigit === 60 ? 59 : previousDigit;\r\n    } else {\r\n      previousDigit = previousDigit === 24 ? 23 : previousDigit;\r\n    }\r\n  }\r\n  // add zero\r\n  if (currentDigit < 10) {\r\n    currentDigit = `0${currentDigit}`;\r\n  }\r\n  if (previousDigit < 10) {\r\n    previousDigit = `0${previousDigit}`;\r\n  }\r\n\r\n  return (\r\n    <div className={'NormalUnitContainer'}>\r\n      <StaticCard position={'NormalupperCard'} digit={currentDigit} />\r\n\r\n      <div className=\"digitLabel\">\r\n        <label>\r\n          <FormattedMessage id={unit} defaultValue=\"unit\" />\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction getTimeRemaining(endtime) {\r\n  let t = Date.parse(endtime) - Date.parse(new Date());\r\n  let days = Math.floor(t / (1000 * 60 * 60 * 24));\r\n  let hours = Math.floor((t / (1000 * 60 * 60)) % 24);\r\n  let minutes = Math.floor((t / 1000 / 60) % 60);\r\n  let seconds = Math.floor((t / 1000) % 60);\r\n  return {\r\n    time: t,\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n  };\r\n}\r\n\r\n// class component\r\nclass NormalClock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      days: 0,\r\n      hours: 0,\r\n      minutes: 0,\r\n      seconds: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(() => this.updateTime(), 50);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  updateTime() {\r\n    const { days, hours, minutes, seconds } = getTimeRemaining(\r\n      this.props.countdown\r\n    );\r\n\r\n    if (days !== this.state.days) {\r\n      this.setState({\r\n        days,\r\n      });\r\n    }\r\n\r\n    // on hour change, update hours and shuffle state\r\n    if (hours !== this.state.hours) {\r\n      this.setState({\r\n        hours,\r\n      });\r\n    }\r\n    // on minute change, update minutes and shuffle state\r\n    if (minutes !== this.state.minutes) {\r\n      this.setState({\r\n        minutes,\r\n      });\r\n    }\r\n    // on second change, update seconds and shuffle state\r\n    if (seconds !== this.state.seconds) {\r\n      this.setState({\r\n        seconds,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // state object destructuring\r\n    const { days, hours, minutes, seconds } = this.state;\r\n    const { countdown, divider } = this.props;\r\n    return (\r\n      <div className={'NormalClock'}>\r\n        <NormalUnitContainer countdown={countdown} unit={'days'} digit={days} />\r\n        {divider ? <span className=\"dividerColon\">:</span> : ''}\r\n        <NormalUnitContainer\r\n          countdown={countdown}\r\n          unit={'hours'}\r\n          digit={hours}\r\n        />\r\n        {divider ? <span className=\"dividerColon\">:</span> : ''}\r\n        <NormalUnitContainer\r\n          countdown={countdown}\r\n          unit={'minutes'}\r\n          digit={minutes}\r\n        />\r\n        {divider ? <span className=\"dividerColon\">:</span> : ''}\r\n        <NormalUnitContainer\r\n          countdown={countdown}\r\n          unit={'seconds'}\r\n          digit={seconds}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NormalClock;\r\n"]},"metadata":{},"sourceType":"module"}