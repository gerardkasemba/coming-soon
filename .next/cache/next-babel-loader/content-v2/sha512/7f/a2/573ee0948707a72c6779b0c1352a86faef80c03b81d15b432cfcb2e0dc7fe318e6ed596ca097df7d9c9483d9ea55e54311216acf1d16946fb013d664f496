{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Desktop\\\\deadline\\\\coming\\\\components\\\\NormalClock\\\\NormalClock.js\";\nimport React from 'react';\nimport './NormalClock.css';\nimport { FormattedMessage } from 'react-intl'; // function component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StaticCard = ({\n  position,\n  digit\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: position,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: digit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}; // function component\n\n\nconst NormalUnitContainer = ({\n  digit,\n  unit = 'time',\n  countdown\n}) => {\n  // assign digit values\n  let currentDigit = digit;\n  let previousDigit;\n\n  if (countdown) {\n    previousDigit = digit + 1; // to prevent a negative value\n\n    if (unit !== 'hours') {\n      previousDigit = previousDigit === 60 ? 59 : previousDigit;\n    } else {\n      previousDigit = previousDigit === 24 ? 23 : previousDigit;\n    }\n  } // add zero\n\n\n  if (currentDigit < 10) {\n    currentDigit = `0${currentDigit}`;\n  }\n\n  if (previousDigit < 10) {\n    previousDigit = `0${previousDigit}`;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'NormalUnitContainer',\n    children: [/*#__PURE__*/_jsxDEV(StaticCard, {\n      position: 'NormalupperCard',\n      digit: currentDigit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"digitLabel\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n          id: unit,\n          defaultValue: \"unit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\nfunction getTimeRemaining(endtime) {\n  let t = Date.parse(endtime) - Date.parse(new Date());\n  let days = Math.floor(t / (1000 * 60 * 60 * 24));\n  let hours = Math.floor(t / (1000 * 60 * 60) % 24);\n  let minutes = Math.floor(t / 1000 / 60 % 60);\n  let seconds = Math.floor(t / 1000 % 60);\n  return {\n    time: t,\n    days,\n    hours,\n    minutes,\n    seconds\n  };\n} // class component\n\n\nclass NormalClock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.updateTime(), 50);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  updateTime() {\n    const {\n      days,\n      hours,\n      minutes,\n      seconds\n    } = getTimeRemaining(this.props.countdown);\n\n    if (days !== this.state.days) {\n      this.setState({\n        days\n      });\n    } // on hour change, update hours and shuffle state\n\n\n    if (hours !== this.state.hours) {\n      this.setState({\n        hours\n      });\n    } // on minute change, update minutes and shuffle state\n\n\n    if (minutes !== this.state.minutes) {\n      this.setState({\n        minutes\n      });\n    } // on second change, update seconds and shuffle state\n\n\n    if (seconds !== this.state.seconds) {\n      this.setState({\n        seconds\n      });\n    }\n  }\n\n  render() {\n    // state object destructuring\n    const {\n      days,\n      hours,\n      minutes,\n      seconds\n    } = this.state;\n    const {\n      countdown,\n      divider\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'NormalClock',\n      children: [/*#__PURE__*/_jsxDEV(NormalUnitContainer, {\n        countdown: countdown,\n        unit: 'days',\n        digit: days\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), divider ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dividerColon\",\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 20\n      }, this) : '', /*#__PURE__*/_jsxDEV(NormalUnitContainer, {\n        countdown: countdown,\n        unit: 'hours',\n        digit: hours\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), divider ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dividerColon\",\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 20\n      }, this) : '', /*#__PURE__*/_jsxDEV(NormalUnitContainer, {\n        countdown: countdown,\n        unit: 'minutes',\n        digit: minutes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), divider ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dividerColon\",\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 20\n      }, this) : '', /*#__PURE__*/_jsxDEV(NormalUnitContainer, {\n        countdown: countdown,\n        unit: 'seconds',\n        digit: seconds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default NormalClock;","map":{"version":3,"sources":["C:/Users/Owner/Desktop/deadline/coming/components/NormalClock/NormalClock.js"],"names":["React","FormattedMessage","StaticCard","position","digit","NormalUnitContainer","unit","countdown","currentDigit","previousDigit","getTimeRemaining","endtime","t","Date","parse","days","Math","floor","hours","minutes","seconds","time","NormalClock","Component","constructor","props","state","componentDidMount","timerID","setInterval","updateTime","componentWillUnmount","clearInterval","setState","render","divider"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './NormalClock.css';\r\nimport { FormattedMessage } from 'react-intl';\r\n// function component\r\nconst StaticCard = ({ position, digit }) => {\r\n  return (\r\n    <div className={position}>\r\n      <span>{digit}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\n// function component\r\nconst NormalUnitContainer = ({ digit, unit = 'time', countdown }) => {\r\n  // assign digit values\r\n  let currentDigit = digit;\r\n  let previousDigit;\r\n  if (countdown) {\r\n    previousDigit = digit + 1;\r\n\r\n    // to prevent a negative value\r\n    if (unit !== 'hours') {\r\n      previousDigit = previousDigit === 60 ? 59 : previousDigit;\r\n    } else {\r\n      previousDigit = previousDigit === 24 ? 23 : previousDigit;\r\n    }\r\n  }\r\n  // add zero\r\n  if (currentDigit < 10) {\r\n    currentDigit = `0${currentDigit}`;\r\n  }\r\n  if (previousDigit < 10) {\r\n    previousDigit = `0${previousDigit}`;\r\n  }\r\n\r\n  return (\r\n    <div className={'NormalUnitContainer'}>\r\n      <StaticCard position={'NormalupperCard'} digit={currentDigit} />\r\n\r\n      <div className=\"digitLabel\">\r\n        <label>\r\n          <FormattedMessage id={unit} defaultValue=\"unit\" />\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction getTimeRemaining(endtime) {\r\n  let t = Date.parse(endtime) - Date.parse(new Date());\r\n  let days = Math.floor(t / (1000 * 60 * 60 * 24));\r\n  let hours = Math.floor((t / (1000 * 60 * 60)) % 24);\r\n  let minutes = Math.floor((t / 1000 / 60) % 60);\r\n  let seconds = Math.floor((t / 1000) % 60);\r\n  return {\r\n    time: t,\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n  };\r\n}\r\n\r\n// class component\r\nclass NormalClock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      days: 0,\r\n      hours: 0,\r\n      minutes: 0,\r\n      seconds: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(() => this.updateTime(), 50);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  updateTime() {\r\n    const { days, hours, minutes, seconds } = getTimeRemaining(\r\n      this.props.countdown\r\n    );\r\n\r\n    if (days !== this.state.days) {\r\n      this.setState({\r\n        days,\r\n      });\r\n    }\r\n\r\n    // on hour change, update hours and shuffle state\r\n    if (hours !== this.state.hours) {\r\n      this.setState({\r\n        hours,\r\n      });\r\n    }\r\n    // on minute change, update minutes and shuffle state\r\n    if (minutes !== this.state.minutes) {\r\n      this.setState({\r\n        minutes,\r\n      });\r\n    }\r\n    // on second change, update seconds and shuffle state\r\n    if (seconds !== this.state.seconds) {\r\n      this.setState({\r\n        seconds,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // state object destructuring\r\n    const { days, hours, minutes, seconds } = this.state;\r\n    const { countdown, divider } = this.props;\r\n    return (\r\n      <div className={'NormalClock'}>\r\n        <NormalUnitContainer countdown={countdown} unit={'days'} digit={days} />\r\n        {divider ? <span className=\"dividerColon\">:</span> : ''}\r\n        <NormalUnitContainer\r\n          countdown={countdown}\r\n          unit={'hours'}\r\n          digit={hours}\r\n        />\r\n        {divider ? <span className=\"dividerColon\">:</span> : ''}\r\n        <NormalUnitContainer\r\n          countdown={countdown}\r\n          unit={'minutes'}\r\n          digit={minutes}\r\n        />\r\n        {divider ? <span className=\"dividerColon\">:</span> : ''}\r\n        <NormalUnitContainer\r\n          countdown={countdown}\r\n          unit={'seconds'}\r\n          digit={seconds}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NormalClock;\r\n"]},"metadata":{},"sourceType":"module"}